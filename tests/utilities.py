from typing import Any, Dict, List, Tuple

import pandas as pd
import torch

from src.data.load_data import get_additional_configs, get_hparams, get_paths


def get_test_paths() -> Dict[str, Any]:
    return get_paths()


def get_test_hparams() -> Dict[str, Any]:
    hparams = get_hparams()
    hparams["epochs"] = 1

    return hparams


def get_test_data() -> pd.DataFrame:
    columns: List[str] = [f"f{i}" for i in range(get_hparams()["input_size"])]\
        + [get_additional_configs()["dependent_var"]]
    values: List[float] = torch.randn(get_hparams()["input_size"] + 1).tolist()
    print(len(columns), len(values))
    data: Dict[str, float] = {columns[i]: values[i] for i in range(len(columns))}
    return pd.DataFrame(data, index=[0])


def get_normalized_test_data() -> Tuple[torch.Tensor, torch.Tensor]:
    return torch.randn(2, get_hparams()["input_size"]), torch.rand(2)


def get_inference_test_data() -> Tuple[torch.Tensor, torch.Tensor]:
    return torch.randn(1, get_hparams()['input_size']).tolist()


def get_test_data_old() -> pd.DataFrame:
    columns: List[str] = [
        "TSI",
        "TIP",
        "TAc",
        "MONTH",
        "DOW",
        "DAY",
        "HOUR",
        "MIN",
        "Aachen Hbf",
        "Aarhus",
        "Amsterdam Centraal",
        "Basel Bad Bf",
        "Basel SBB",
        "Berlin Gesundbrunnen",
        "Berlin Hbf (tief)",
        "Berlin Ostbahnhof",
        "Berlin Südkreuz",
        "Bonn-Bad Godesberg",
        "Bremen Hbf",
        "Bruxelles Midi",
        "Chur",
        "Cottbus Hbf",
        "Dortmund Hbf",
        "Dresden Hbf",
        "Düsseldorf Hbf",
        "Emden Außenhafen",
        "Emden Hbf",
        "Erfurt Hbf",
        "Essen Hbf",
        "Fehmarn-Burg",
        "Flensburg",
        "Frankfurt(M) Flughafen Fernbf",
        "Frankfurt(Main)Hbf",
        "Freiburg(Breisgau) Hbf",
        "Gera Hbf",
        "Graz Hbf",
        "Greifswald",
        "Göttingen",
        "Hamburg Hbf",
        "Hamburg-Altona",
        "Hamm(Westf)",
        "Hannover Hbf",
        "Innsbruck Hbf",
        "Interlaken Ost",
        "Jena Paradies",
        "Karlsruhe Hbf",
        "Kassel-Wilhelmshöhe",
        "Kiel Hbf",
        "Koblenz Hbf",
        "Koebenhavns Lufthavn st",
        "Konstanz",
        "Köln Hbf",
        "Köln Messe/Deutz Gl.11-12",
        "Köln/Bonn Flughafen",
        "Leipzig Hbf",
        "Luxembourg",
        "Lübeck Hbf",
        "Lüneburg",
        "Magdeburg Hbf",
        "München Hbf",
        "München Ost",
        "München-Pasing",
        "Münster(Westf)Hbf",
        "Norddeich",
        "Norddeich Mole",
        "Nürnberg Hbf",
        "Oberstdorf",
        "Oldenburg(Oldb)",
        "Ostseebad Binz",
        "Paris Est",
        "Passau Hbf",
        "Regensburg Hbf",
        "Rostock Hbf",
        "Rottweil",
        "Saarbrücken Hbf",
        "Salzburg Hbf",
        "Singen(Hohentwiel)",
        "Stralsund Hbf",
        "Stuttgart Hbf",
        "Tübingen Hbf",
        "Warnemünde",
        "Weimar",
        "Westerland(Sylt)",
        "Wien Hbf",
        "Wiesbaden Hbf",
        "Wolfsburg Hbf",
        "Würzburg Hbf",
        "Zürich HB",
        "ICE",
        "TNR",
        "ARR",
    ]
    values: List[float] = [
        8000207.0,
        0,
        0,
        6,
        6,
        16,
        15,
        5,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        108,
        1,
    ]
    data: Dict[str, float] = {columns[i]: values[i] for i in range(len(columns))}
    return pd.DataFrame(data, index=[0])
