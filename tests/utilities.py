import os
from typing import Any, Dict, List, Tuple

import pandas as pd
import torch
import yaml

from tests import _PROJECT_ROOT


def get_cfg() -> Dict[str, Dict[str, Any]]:
    with open(os.path.join(_PROJECT_ROOT, "src/configs/config.yaml"), "r") as yaml_file:
        cfg = yaml.safe_load(yaml_file)

    return cfg


def get_hparams() -> Dict[str, Any]:
    cfg = get_cfg()

    hparams: Dict[str, Any] = {
        "lr": cfg["hyperparameters"]["learning_rate"],
        "epochs": 1,  # cfg["hyperparameters"]["epochs"],
        "batch_size": cfg["hyperparameters"]["batch_size"],
        "input_size": cfg["hyperparameters"]["input_size"],
        "output_size": cfg["hyperparameters"]["output_size"],
        "hidden_size": cfg["hyperparameters"]["hidden_size"],
        "num_layers": cfg["hyperparameters"]["num_layers"],
        "criterion": cfg["hyperparameters"]["criterion"],
        "optimizer": cfg["hyperparameters"]["optimizer"],
    }

    return hparams


def get_paths() -> Dict[str, str]:
    cfg = get_cfg()

    return cfg["paths"]


def get_test_data() -> pd.DataFrame:
    columns: List[str] = [
        "TSI",
        "TIP",
        "TAc",
        "MONTH",
        "DOW",
        "DAY",
        "HOUR",
        "MIN",
        "Aachen Hbf",
        "Aarhus",
        "Amsterdam Centraal",
        "Basel Bad Bf",
        "Basel SBB",
        "Berlin Gesundbrunnen",
        "Berlin Hbf (tief)",
        "Berlin Ostbahnhof",
        "Berlin Südkreuz",
        "Bonn-Bad Godesberg",
        "Bremen Hbf",
        "Bruxelles Midi",
        "Chur",
        "Cottbus Hbf",
        "Dortmund Hbf",
        "Dresden Hbf",
        "Düsseldorf Hbf",
        "Emden Außenhafen",
        "Emden Hbf",
        "Erfurt Hbf",
        "Essen Hbf",
        "Fehmarn-Burg",
        "Flensburg",
        "Frankfurt(M) Flughafen Fernbf",
        "Frankfurt(Main)Hbf",
        "Freiburg(Breisgau) Hbf",
        "Gera Hbf",
        "Graz Hbf",
        "Greifswald",
        "Göttingen",
        "Hamburg Hbf",
        "Hamburg-Altona",
        "Hamm(Westf)",
        "Hannover Hbf",
        "Innsbruck Hbf",
        "Interlaken Ost",
        "Jena Paradies",
        "Karlsruhe Hbf",
        "Kassel-Wilhelmshöhe",
        "Kiel Hbf",
        "Koblenz Hbf",
        "Koebenhavns Lufthavn st",
        "Konstanz",
        "Köln Hbf",
        "Köln Messe/Deutz Gl.11-12",
        "Köln/Bonn Flughafen",
        "Leipzig Hbf",
        "Luxembourg",
        "Lübeck Hbf",
        "Lüneburg",
        "Magdeburg Hbf",
        "München Hbf",
        "München Ost",
        "München-Pasing",
        "Münster(Westf)Hbf",
        "Norddeich",
        "Norddeich Mole",
        "Nürnberg Hbf",
        "Oberstdorf",
        "Oldenburg(Oldb)",
        "Ostseebad Binz",
        "Paris Est",
        "Passau Hbf",
        "Regensburg Hbf",
        "Rostock Hbf",
        "Rottweil",
        "Saarbrücken Hbf",
        "Salzburg Hbf",
        "Singen(Hohentwiel)",
        "Stralsund Hbf",
        "Stuttgart Hbf",
        "Tübingen Hbf",
        "Warnemünde",
        "Weimar",
        "Westerland(Sylt)",
        "Wien Hbf",
        "Wiesbaden Hbf",
        "Wolfsburg Hbf",
        "Würzburg Hbf",
        "Zürich HB",
        "ICE",
        "TNR",
        "ARR",
    ]
    values: List[float] = [
        8000207.0,
        0,
        0,
        6,
        6,
        16,
        15,
        5,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        108,
        1,
    ]
    data: Dict[str, float] = {columns[i]: values[i] for i in range(len(columns))}
    return pd.DataFrame(data, index=[0])


def get_normalized_test_data() -> Tuple[torch.Tensor, torch.Tensor]:
    return torch.randn(2, 90), torch.rand(2, 1)
